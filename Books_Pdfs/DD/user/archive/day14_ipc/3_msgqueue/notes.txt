Message Queues
=================

A message queue is a linked list of messages stored within the kernel and identified by a message queue identifier.

Message queue provide a reasonably easy and efficient way of passing data between two unrelated processes.

First of all, you want to connect to a queue, or create it if it doesn't exist. The call to accomplish this is the msgget() system call:

int msgget(key_t key, int msgflg);

msgget() returns the message queue ID on success, or -1 on failure (and it sets errno, of course.)

The first, key is a system-wide unique identifier describing the queue you want to connect to (or create)

Every other process that wants to connect to this queue will have to use the same key.

The other argument, msgflg tells msgget() what to do with queue in question. 

To create a queue, this field must be set equal to IPC_CREAT bit-wise OR'd with the permissions for this queue.

What about the key?
===================

How do we create one? Well, since the type key_t is actually just a long, you can use any number you want. 

But what if you hard-code the number and some other unrelated program hardcodes the same number but wants another queue?

The solution is to use the ftok() function which generates a key from two arguments:

key_t ftok(const char *path, int id);
 Basically, path just has to be a file that this process can read.

The other argument, id is usually just set to some arbitrary char, like 'A'. 

The ftok() function uses information about the named file (like inode number, etc.) and the id to generate a probably-unique key for msgget()

Programs that want to use the same queue must generate the same key, so they must pass the same parameters to ftok().



